name: CI/CD

on:
  push:
    branches: [ "backend/develop" ]
  pull_request:
    branches: [ "backend/develop" ]

#permissions:
#  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      #      - name: Make application-dev.yml
      #        if: ${{ github.event.push.head.ref == 'main' }}
      #        env:
      #          PROPERTIES_DEV: ${{ secrets.PROPERTIES_DEV }}
      #        run: |
      #          cd ./src/main/resources
      #          touch ./application-dev.yml
      #          echo "${PROPERTIES_DEV}" > ./application-dev.yml
      #        shell: bash

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.9.1

      - name: Login to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Docker Image Build
        run: |
          docker build --platform linux/x64/v8 -t shb03323/cicd -f Dockerfile .

      - name: Docker Hub Push
        run: docker push shb03323/cicd

  cd:
    needs: ci
    runs-on: [ self-hosted, maxOS, X64 ]

    steps:
      - name: Pull Latest Docker Image
        run: |
          sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_PASSWORD }}
          if sudo docker inspect cicd-container &>/dev/null; then
            sudo docker stop cicd-container
            sudo docker rm -f cicd-container
            sudo docker image prune -af
          fi
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest

      - name: Run Container
        run: |
          sudo docker run --name cicd-container -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest 1>> build.log 2>> error.log &
#jobs:
##  build:
##    runs-on: ubuntu-latest
##
##    steps:
##      - uses: actions/checkout@v3
##      - name: Set up JDK 17
##        uses: actions/setup-java@v3
##        with:
##          java-version: '17'
##          distribution: 'temurin'
##
##      - name: Grant execute permission for gradlew
##        run: chmod +x gradlew
##
##      - name: Build with Gradle
##        run: ./gradlew clean build
#  deploy:
#    deploy:
#      runs-on: self-hosted
#
#      steps:
#        - name: change permission
#          run: |
#            sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner/_work/cicdtest
#
#        - uses: actions/checkout@v3
#        - name: Set up JDK 17
#          uses: actions/setup-java@v3
#          with:
#            java-version: '17'
#            distribution: 'temurin'
#
#        - name: gradle bootjar
#          run: |
#            chmod +x ./gradlew
#            ./gradlew bootjar
#
##        - name: kill 80 port if exist
##          run: |
##            if sudo lsof -i :80; then
##            echo "Port 80 is already in use. Killing the process..."
##            sudo lsof -i :80 | awk 'NR!=1 {print $2}' | sudo xargs kill -9
##            fi
#
#        - name: docker build
#          run: |
#            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
#            docker build -t app .
#            docker tag app ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest
#            docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest
#
#        - name: deploy
#          uses: self-hosted
#          with:
#            # 도커 작업
#            script: |
#              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest
#              docker stop $(docker ps -a -q)
#              docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/my-ubuntu:latest
#              docker rm $(docker ps --filter 'status=exited' -a -q)
#              docker image prune -a -f
